<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>  The Easy Way to Extract Useful Text from Arbitrary HTML - AI Depot</title>

<link rel="stylesheet" href="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/content.css" type="text/css" media="screen">
<link rel="alternate" type="application/rss+xml" title="AI Depot RSS Feed" href="http://ai-depot.com/feed/articles">
<link rel="pingback" href="http://ai-depot.com/articles/xmlrpc.php">

	<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://ai-depot.com/articles/xmlrpc.php?rsd">

<!-- Powered by AdSense-Deluxe WordPress Plugin v0.8 - http://www.acmetech.com/blog/adsense-deluxe/ -->

<!-- Start Of Script Generated By WP-Polls 2.14 -->
<script type="text/javascript" src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/tw-sack.js"></script>
<script type="text/javascript" src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/polls-js.htm"></script>
<link rel="stylesheet" href="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/polls-css.css" type="text/css" media="screen">
<style type="text/css">
.wp-polls .pollbar {
	margin: 1px;
	font-size: 6px;
	line-height: 8px;
	height: 8px;
	background-image: url('http://ai-depot.com/articles/wp-content/plugins/polls/images/default/pollbg.gif');
	border: 1px solid #202040;
}
</style>
<!-- End Of Script Generated By WP-Polls 2.14 -->
	<meta name="keywords" content="artificial intelligence,machine learning,neural network,python,scraping,statistics,text mining"></head>
<body>

<div id="container">

  <div id="header">
    <a href="http://ai-depot.com/"><img src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/logo.png" alt="AI Depot"></a>
    <ul>
		<li><a href="http://ai-depot.com/news/">News</a></li>
		<li class="active"><a href="http://ai-depot.com/articles/">Articles</a></li>
		<li><a href="http://ai-depot.com/knowledge/">Knowledge</a></li>
		<li><a href="http://ai-depot.com/resources/">Resources</a></li>
		<li><a href="http://ai-depot.com/site/">Site</a></li>
    </ul>
  </div>
  <div id="wrapper">

<div id="content">
<!--single.php-->
	
<!--loop-->			
  
		<!--post title-->
			<h2 id="post-90"><a href="http://ai-depot.com/articles/the-easy-way-to-extract-useful-text-from-arbitrary-html/" rel="bookmark" title="Permanent Link: The Easy Way to Extract Useful Text from Arbitrary HTML">The Easy Way to Extract Useful Text from Arbitrary HTML</a></h2>
		<p><b>By alexjc</b> | April 5, 2007</p>
<div class="postspace2">
	</div>			
<!--content with more link-->
			<p><img src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/statistics.png" alt="[Statistical Text Mining]"></p>
<p>You’ve finally got your hands on the diverse collection of HTML 
documents you needed.  But the content you’re interested in is hidden 
amidst adverts, layout tables or formatting markup, and other various 
links.  Even worse, there’s visible text in the menus, headers and 
footers that you want to filter out.  If you don’t want to write a 
complex scraping program for each type of HTML file, there is a 
solution.</p>
<p>This article shows you how to write a relatively simple script to 
extract text paragraphs from large chunks of HTML code, without knowing 
its structure or the tags used.  It works on news articles and blogs 
pages with worthwhile text content, among others…</p>
<p>Do you want to find out how statistics and machine learning can save you time and effort <a href="http://ai-depot.com/articles/the-easy-way-to-extract-useful-text-from-arbitrary-html/">mining text</a>?</p>
<p><a id="more-90"></a></p>
<div class="advert"><script type="text/javascript"><!--
google_ad_client = "pub-0940885572422333";
google_alternate_color = "FFFFFF";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "text";
//2007-04-05: Content
google_ad_channel = "6105530284";
google_color_border = "FFFFFF";
google_color_bg = "FFFFFF";
google_color_link = "202040";
google_color_text = "000000";
google_color_url = "606030";
//-->
</script>
<script type="text/javascript" src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><ins id="aswift_0_anchor" style="display:block;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;" frameborder="0" height="60" scrolling="no" width="468"></iframe></ins></ins></div>
<p>The concept is rather simple: use information about the density of 
text vs. HTML code to work out if a line of text is worth outputting.  
(This isn’t a novel idea, but it works!)  The basic process works as 
follows:</p>
<ol>
<li>Parse the HTML code and keep track of the number of bytes processed.</li>
<li>Store the text output on a per-line, or per-paragraph basis.</li>
<li>Associate with each text line the number of bytes of HTML required to describe it.</li>
<li>Compute the text density of each line by calculating the ratio of text to bytes.</li>
<li>Then decide if the line is part of the content by using a neural network.</li>
</ol>
<p>You can get pretty good results just by checking if the line’s 
density is above a fixed threshold (or the average), but the system 
makes fewer mistakes if you use machine learning — not to mention that 
it’s easier to implement!</p>
<p>Let’s take it from the top…</p>
<h3>Converting the HTML to Text</h3>
<p>What you need is the core of a text-mode browser, which is already 
setup to read files with HTML markup and display raw text.  By reusing 
existing code, you won’t have to spend too much time handling invalid 
XML documents, which are very common — as you’ll realise quickly.</p>
<p>As a quick example, we’ll be using <a href="http://python.org/">Python</a> along with a few built-in modules: <tt>htmllib</tt> for the parsing and <tt>formatter</tt> for outputting formatted text.  This is what the top-level function looks like:</p>

<div class="wp_syntax"><div class="code"><pre class="python"><span style="color: #7777ff;font-weight:bold;">def</span> extract_text<span style="color: black;">(</span>html<span style="color: black;">)</span>:
    <span style="color: #808080; font-style: italic;"># Derive from formatter.AbstractWriter to store paragraphs.</span>
    writer = LineWriter<span style="color: black;">(</span><span style="color: black;">)</span>
    <span style="color: #808080; font-style: italic;"># Default formatter sends commands to our writer.</span>
    <span style="color: #808040;">formatter</span> = AbstractFormatter<span style="color: black;">(</span>writer<span style="color: black;">)</span>
    <span style="color: #808080; font-style: italic;"># Derive from htmllib.HTMLParser to track parsed bytes.</span>
    <span style="color: #808040;">parser</span> = TrackingParser<span style="color: black;">(</span>writer, <span style="color: #808040;">formatter</span><span style="color: black;">)</span>
    <span style="color: #808080; font-style: italic;"># Give the parser the raw HTML data.</span>
    <span style="color: #808040;">parser</span>.<span style="color: black;">feed</span><span style="color: black;">(</span>html<span style="color: black;">)</span>
    <span style="color: #808040;">parser</span>.<span style="color: black;">close</span><span style="color: black;">(</span><span style="color: black;">)</span>
    <span style="color: #808080; font-style: italic;"># Filter the paragraphs stored and output them.</span>
    <span style="color: #7777ff;font-weight:bold;">return</span> writer.<span style="color: black;">output</span><span style="color: black;">(</span><span style="color: black;">)</span></pre></div></div>

<p>The TrackingParser itself overrides the callback functions for 
parsing start and end tags, as they are given the current parse index in
 the buffer. You don’t have access to that normally, unless you start 
diving into frames in the call stack — which isn’t the best approach!  
Here’s what the class looks like:</p>

<div class="wp_syntax"><div class="code"><pre class="python"><span style="color: #7777ff;font-weight:bold;">class</span> TrackingParser<span style="color: black;">(</span><span style="color: #808040;">htmllib</span>.<span style="color: #808040;">HTMLParser</span><span style="color: black;">)</span>:
    <span style="color: #48488b;">""</span><span style="color: #48488b;">"Try to keep accurate pointer of parsing location."</span><span style="color: #48488b;">""</span>
    <span style="color: #7777ff;font-weight:bold;">def</span> <span style="color: #0000cd;">__init__</span><span style="color: black;">(</span><span style="color: #A0A020;">self</span>, writer, *args<span style="color: black;">)</span>:
        <span style="color: #808040;">htmllib</span>.<span style="color: #808040;">HTMLParser</span>.<span style="color: #0000cd;">__init__</span><span style="color: black;">(</span><span style="color: #A0A020;">self</span>, *args<span style="color: black;">)</span>
        <span style="color: #A0A020;">self</span>.<span style="color: black;">writer</span> = writer
    <span style="color: #7777ff;font-weight:bold;">def</span> parse_starttag<span style="color: black;">(</span><span style="color: #A0A020;">self</span>, i<span style="color: black;">)</span>:
        index = <span style="color: #808040;">htmllib</span>.<span style="color: #808040;">HTMLParser</span>.<span style="color: black;">parse_starttag</span><span style="color: black;">(</span><span style="color: #A0A020;">self</span>, i<span style="color: black;">)</span>
        <span style="color: #A0A020;">self</span>.<span style="color: black;">writer</span>.<span style="color: black;">index</span> = index
        <span style="color: #7777ff;font-weight:bold;">return</span> index
    <span style="color: #7777ff;font-weight:bold;">def</span> parse_endtag<span style="color: black;">(</span><span style="color: #A0A020;">self</span>, i<span style="color: black;">)</span>:
        <span style="color: #A0A020;">self</span>.<span style="color: black;">writer</span>.<span style="color: black;">index</span> = i
        <span style="color: #7777ff;font-weight:bold;">return</span> <span style="color: #808040;">htmllib</span>.<span style="color: #808040;">HTMLParser</span>.<span style="color: black;">parse_endtag</span><span style="color: black;">(</span><span style="color: #A0A020;">self</span>, i<span style="color: black;">)</span></pre></div></div>

<p>The <tt>LineWriter</tt> class does the bulk of the work when called 
by the default formatter.  If you have any improvements or changes to 
make, most likely they’ll go here.  This is where we’ll put our machine 
learning code in later.  But you can keep the implementation rather 
simple and still get good results.  Here’s the simplest possible code:</p>

<div class="wp_syntax"><div class="code"><pre class="python"><span style="color: #7777ff;font-weight:bold;">class</span> Paragraph:
    <span style="color: #7777ff;font-weight:bold;">def</span> <span style="color: #0000cd;">__init__</span><span style="color: black;">(</span><span style="color: #A0A020;">self</span><span style="color: black;">)</span>:
        <span style="color: #A0A020;">self</span>.<span style="color: black;">text</span> = <span style="color: #48488b;">''</span>
        <span style="color: #A0A020;">self</span>.<span style="color: black;">bytes</span> = <span style="color: #454580;">0</span>
        <span style="color: #A0A020;">self</span>.<span style="color: black;">density</span> = <span style="color: #454580;">0.0</span>
&nbsp;
<span style="color: #7777ff;font-weight:bold;">class</span> LineWriter<span style="color: black;">(</span><span style="color: #808040;">formatter</span>.<span style="color: black;">AbstractWriter</span><span style="color: black;">)</span>:
    <span style="color: #7777ff;font-weight:bold;">def</span> <span style="color: #0000cd;">__init__</span><span style="color: black;">(</span><span style="color: #A0A020;">self</span>, *args<span style="color: black;">)</span>:
        <span style="color: #A0A020;">self</span>.<span style="color: black;">last_index</span> = <span style="color: #454580;">0</span>
        <span style="color: #A0A020;">self</span>.<span style="color: black;">lines</span> = <span style="color: black;">[</span>Paragraph<span style="color: black;">(</span><span style="color: black;">)</span><span style="color: black;">]</span>
        <span style="color: #808040;">formatter</span>.<span style="color: black;">AbstractWriter</span>.<span style="color: #0000cd;">__init__</span><span style="color: black;">(</span><span style="color: #A0A020;">self</span><span style="color: black;">)</span>
&nbsp;
    <span style="color: #7777ff;font-weight:bold;">def</span> send_flowing_data<span style="color: black;">(</span><span style="color: #A0A020;">self</span>, data<span style="color: black;">)</span>:
        <span style="color: #808080; font-style: italic;"># Work out the length of this text chunk.</span>
        t = <span style="color: #A0A020;">len</span><span style="color: black;">(</span>data<span style="color: black;">)</span>
        <span style="color: #808080; font-style: italic;"># We've parsed more text, so increment index.</span>
        <span style="color: #A0A020;">self</span>.<span style="color: black;">index</span> += t
        <span style="color: #808080; font-style: italic;"># Calculate the number of bytes since last time.</span>
        b = <span style="color: #A0A020;">self</span>.<span style="color: black;">index</span> - <span style="color: #A0A020;">self</span>.<span style="color: black;">last_index</span>
        <span style="color: #A0A020;">self</span>.<span style="color: black;">last_index</span> = <span style="color: #A0A020;">self</span>.<span style="color: black;">index</span>
        <span style="color: #808080; font-style: italic;"># Accumulate this information in current line.</span>
        l = <span style="color: #A0A020;">self</span>.<span style="color: black;">lines</span><span style="color: black;">[</span><span style="color: #454580;">-1</span><span style="color: black;">]</span>
        l.<span style="color: black;">text</span> += data
        l.<span style="color: black;">bytes</span> += b
&nbsp;
    <span style="color: #7777ff;font-weight:bold;">def</span> send_paragraph<span style="color: black;">(</span><span style="color: #A0A020;">self</span>, blankline<span style="color: black;">)</span>:
        <span style="color: #48488b;">""</span><span style="color: #48488b;">"Create a new paragraph if necessary."</span><span style="color: #48488b;">""</span>
        <span style="color: #7777ff;font-weight:bold;">if</span> <span style="color: #A0A020;">self</span>.<span style="color: black;">lines</span><span style="color: black;">[</span><span style="color: #454580;">-1</span><span style="color: black;">]</span>.<span style="color: black;">text</span> == <span style="color: #48488b;">''</span>:
            <span style="color: #7777ff;font-weight:bold;">return</span>
        <span style="color: #A0A020;">self</span>.<span style="color: black;">lines</span><span style="color: black;">[</span><span style="color: #454580;">-1</span><span style="color: black;">]</span>.<span style="color: black;">text</span> += <span style="color: #48488b;">'n'</span> * <span style="color: black;">(</span>blankline<span style="color: #454580;">+1</span><span style="color: black;">)</span>
        <span style="color: #A0A020;">self</span>.<span style="color: black;">lines</span><span style="color: black;">[</span><span style="color: #454580;">-1</span><span style="color: black;">]</span>.<span style="color: black;">bytes</span> += <span style="color: #454580;">2</span> * <span style="color: black;">(</span>blankline<span style="color: #454580;">+1</span><span style="color: black;">)</span>
        <span style="color: #A0A020;">self</span>.<span style="color: black;">lines</span>.<span style="color: black;">append</span><span style="color: black;">(</span>Writer.<span style="color: black;">Paragraph</span><span style="color: black;">(</span><span style="color: black;">)</span><span style="color: black;">)</span>
&nbsp;
    <span style="color: #7777ff;font-weight:bold;">def</span> send_literal_data<span style="color: black;">(</span><span style="color: #A0A020;">self</span>, data<span style="color: black;">)</span>:
        <span style="color: #A0A020;">self</span>.<span style="color: black;">send_flowing_data</span><span style="color: black;">(</span>data<span style="color: black;">)</span>
&nbsp;
    <span style="color: #7777ff;font-weight:bold;">def</span> send_line_break<span style="color: black;">(</span><span style="color: #A0A020;">self</span><span style="color: black;">)</span>:
        <span style="color: #A0A020;">self</span>.<span style="color: black;">send_paragraph</span><span style="color: black;">(</span><span style="color: #454580;">0</span><span style="color: black;">)</span></pre></div></div>

<p>This code doesn’t do any outputting yet, it just gathers the data.  
We now have a bunch of paragraphs in an array, we know their length, and
 we know roughly how many bytes of HTML were necessary to create them.  
Let’s see what emerge from our statistics.</p>
<h3>Examining the Data</h3>
<p>Luckily, there are some patterns in the data.   In the raw output 
below, you’ll notice there are definite spikes in the number of HTML 
bytes required to encode lines of text, notably around the title, both 
sidebars, headers and footers.</p>
<div class="image"> <img src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/textvsbytes.png" alt="Graph of Text Output vs. HTML Bytes"></div>
<p>While the number of HTML bytes spikes in places, it remains below 
average for quite a few lines.  On these lines, the text output is 
rather high.  Calculating the <strong>density</strong> of text to HTML bytes gives us a better understanding of this relationship.</p>
<div class="image"><img src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/density.png" alt="Graph of Text Density per Line"></div>
<p>The patterns are more obvious in this density value, so it gives us something concrete to work with.</p>
<h3>Filtering the Lines</h3>
<p>The simplest way we can filter lines now is by comparing the density to a fixed threshold, such as 50% or the <em>average</em> density.  Finishing the <tt>LineWriter</tt> class:</p>

<div class="wp_syntax"><div class="code"><pre class="python">    <span style="color: #7777ff;font-weight:bold;">def</span> compute_density<span style="color: black;">(</span><span style="color: #A0A020;">self</span><span style="color: black;">)</span>:
        <span style="color: #48488b;">""</span><span style="color: #48488b;">"Calculate the density for each line, and the average."</span><span style="color: #48488b;">""</span>
        total = <span style="color: #454580;">0.0</span>
        <span style="color: #7777ff;font-weight:bold;">for</span> l <span style="color: #7777ff;font-weight:bold;">in</span> <span style="color: #A0A020;">self</span>.<span style="color: black;">lines</span>:
            l.<span style="color: black;">density</span> = <span style="color: #A0A020;">len</span><span style="color: black;">(</span>l.<span style="color: black;">text</span><span style="color: black;">)</span> / <span style="color: #A0A020;">float</span><span style="color: black;">(</span>l.<span style="color: black;">bytes</span><span style="color: black;">)</span>
            total += l.<span style="color: black;">density</span>
        <span style="color: #808080; font-style: italic;"># Store for optional use by the neural network.</span>
        <span style="color: #A0A020;">self</span>.<span style="color: black;">average</span> = total / <span style="color: #A0A020;">float</span><span style="color: black;">(</span><span style="color: #A0A020;">len</span><span style="color: black;">(</span><span style="color: #A0A020;">self</span>.<span style="color: black;">lines</span><span style="color: black;">)</span><span style="color: black;">)</span>
&nbsp;
    <span style="color: #7777ff;font-weight:bold;">def</span> output<span style="color: black;">(</span><span style="color: #A0A020;">self</span><span style="color: black;">)</span>:
        <span style="color: #48488b;">""</span><span style="color: #48488b;">"Return a string with the useless lines filtered out."</span><span style="color: #48488b;">""</span>
        <span style="color: #A0A020;">self</span>.<span style="color: black;">compute_density</span><span style="color: black;">(</span><span style="color: black;">)</span>
        output = <span style="color: #808040;">StringIO</span>.<span style="color: #808040;">StringIO</span><span style="color: black;">(</span><span style="color: black;">)</span>
        <span style="color: #7777ff;font-weight:bold;">for</span> l <span style="color: #7777ff;font-weight:bold;">in</span> <span style="color: #A0A020;">self</span>.<span style="color: black;">lines</span>:
            <span style="color: #808080; font-style: italic;"># Check density against threshold.</span>
            <span style="color: #808080; font-style: italic;"># Custom filter extensions go here.</span>
            <span style="color: #7777ff;font-weight:bold;">if</span> l.<span style="color: black;">density</span> &amp;gt; <span style="color: #454580;">0.5</span>:
	        output.<span style="color: black;">write</span><span style="color: black;">(</span>l.<span style="color: black;">text</span><span style="color: black;">)</span>
	<span style="color: #7777ff;font-weight:bold;">return</span> output.<span style="color: black;">getvalue</span><span style="color: black;">(</span><span style="color: black;">)</span></pre></div></div>

<p>This rough filter typically gets most of the lines right.  All the 
headers, footers and sidebars text is usually stripped as long as it’s 
not too long.  However, if there are long copyright notices, comments, 
or descriptions of other stories, then those are output too.  Also, if 
there are short lines around inline graphics or adverts within the text,
 these are not output.</p>
<p>To fix this, we need a more complex filtering heuristic.  But instead
 of spending days working out the logic manually, we’ll just grab loads 
of information about each line and use machine learning to find patterns
 for us.</p>
<h3>Supervised Machine Learning</h3>
<p>Here’s an example of an interface for tagging lines of text as content or not:</p>
<div class="image"><img src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/training.png" alt="Training From News Articles"></div>
<p>The idea of supervised learning is to provide examples for an 
algorithm to learn from.  In our case, we give it a set documents that 
were tagged by humans, so we know which line must be output and which 
line must be filtered out.  For this we’ll use a simple neural network 
known as the perceptron.  It takes floating point inputs and filters the
 information through weighted connections between “neurons” and outputs 
another floating point number.  Roughly speaking, the number of neurons 
and layers affects the ability to approximate functions precisely; we’ll
 use both single-layer perceptrons (SLP) and multi-layer perceptrons 
(MLP) for prototyping.</p>
<p>To get the neural network to learn, we need to gather some data.  This is where the earlier <tt>LineWriter.output()</tt>
 function comes in handy; it gives us a central point to process all the
 lines at once, and make a global decision which lines to output.  
Starting with intuition and experimenting a bit, we discover that the 
following data is useful to decide how to filter a line:</p>
<ul>
<li>Density of the <strong>current</strong> line.</li>
<li>Number of HTML bytes of the line.</li>
<li>Length of output text for this line.</li>
<li>These three values for the <strong>previous</strong> line,</li>
<li>… and the same for the <strong>next</strong> line.</li>
</ul>
<p>For the implementation, we’ll be using Python to interface with <em>FANN</em>, the <a href="http://leenissen.dk/fann/">Fast Artificial Neural Network</a> Library.  The essence of the learning code goes like this:</p>

<div class="wp_syntax"><div class="code"><pre class="python"><span style="color: #7777ff;font-weight:bold;">from</span> pyfann <span style="color: #7777ff;font-weight:bold;">import</span> fann, libfann
&nbsp;
<span style="color: #808080; font-style: italic;"># This creates a new single-layer perceptron with 1 output and 3 inputs.</span>
obj = libfann.<span style="color: black;">fann_create_standard_array</span><span style="color: black;">(</span><span style="color: #454580;">2</span>, <span style="color: black;">(</span><span style="color: #454580;">3</span>, <span style="color: #454580;">1</span><span style="color: black;">)</span><span style="color: black;">)</span>
ann = fann.<span style="color: black;">fann_class</span><span style="color: black;">(</span>obj<span style="color: black;">)</span>
&nbsp;
<span style="color: #808080; font-style: italic;"># Load the data we described above.</span>
patterns = fann.<span style="color: black;">read_train_from_file</span><span style="color: black;">(</span><span style="color: #48488b;">'training.txt'</span><span style="color: black;">)</span>
ann.<span style="color: black;">train_on_data</span><span style="color: black;">(</span>patterns, <span style="color: #454580;">1000</span>, <span style="color: #454580;">1</span>, <span style="color: #454580;">0.0</span><span style="color: black;">)</span>
&nbsp;
<span style="color: #808080; font-style: italic;"># Then test it with different data.</span>
<span style="color: #7777ff;font-weight:bold;">for</span> datin, datout <span style="color: #7777ff;font-weight:bold;">in</span> validation_data:
    result = ann.<span style="color: black;">run</span><span style="color: black;">(</span>datin<span style="color: black;">)</span>
    <span style="color: #7777ff;font-weight:bold;">print</span> <span style="color: #48488b;">'Got:'</span>, result, <span style="color: #48488b;">' Expected:'</span>, datout</pre></div></div>

<p>Trying out different data and different network structures is a 
rather mechanical process.  Don’t have too many neurons or you may train
 too well for the set of documents you have (overfitting), and 
conversely try to have enough to solve the problem well.  Here are the 
results, varying the number of lines used (1L-3L) and the number of 
attributes per line (1A-3A):</p>
<div class="image"><img src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/comparison.png" alt="Neural Network Comparison Chart"></div>
<p>The interesting thing to note is that 0.5 is already a pretty good 
guess at a fixed threshold (see first set of columns).  The learning 
algorithm cannot find much better solution for comparing the density 
alone (1 Attribute in the second column).  With 3 Attributes, the next 
SLP does better overall, though it gets more false negatives.  Using 
multiple lines also increases the performance of the single layer 
perceptron (fourth set of columns).  And finally, using a more complex 
neural network structure works best overall — making 80% less errors in 
filtering the lines.</p>
<p><em>Note that you can tweak how the error is calculated if you want to punish false positives more than false negatives.</em></p>
<h3>Conclusion</h3>
<p>Extracting text from arbitrary HTML files doesn’t necessarily require
 scraping the file with custom code.  You can use statistics to get 
pretty amazing results, and machine learning to get even better.  By 
tweaking the threshold, you can avoid the worst false positive that 
pollute your text output.  But it’s not so bad in practice; where the 
neural network makes mistakes, even humans have trouble classifying 
those lines as “content” or not.</p>
<p>Now all you have to figure out is what to do with that clean text content!</p>
	
                       <!--for paginate posts-->
			
<p><b>Tags:</b> <a href="http://ai-depot.com/articles/tag/machine_learning" title="Browse for machine learning" rel="tag">machine learning</a>, <a href="http://ai-depot.com/articles/tag/neural_network" title="Browse for neural network" rel="tag">neural network</a>, <a href="http://ai-depot.com/articles/tag/python" title="Browse for python" rel="tag">python</a>, <a href="http://ai-depot.com/articles/tag/scraping" title="Browse for scraping" rel="tag">scraping</a>, <a href="http://ai-depot.com/articles/tag/statistics" title="Browse for statistics" rel="tag">statistics</a>, <a href="http://ai-depot.com/articles/tag/text_mining" title="Browse for text mining" rel="tag">text mining</a><br>
   <b>Category:</b> <a href="http://ai-depot.com/articles/category/tutorial/" title="View all posts in tutorial" rel="category tag">tutorial</a> |   </p>
				
<div class="postspace">
	</div>

				<p></p><!--all options over and out-->

<script type="text/javascript"><!--
google_ad_client = "pub-0940885572422333";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "text";
//2007-03-23: Wordpress
google_ad_channel = "3050258516";
google_color_border = "FFFFFF";
google_color_bg = "FFFFFF";
google_color_link = "202040";
google_color_text = "000000";
google_color_url = "606030";
//-->
</script>
<script type="text/javascript" src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><ins id="aswift_1_anchor" style="display:block;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){w.location.replace(h)}}" id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;" frameborder="0" height="60" scrolling="no" width="468"></iframe></ins></ins>	

<p></p>
<p></p>

	<!--include comments template-->
	
<!-- You can start editing here. -->

	<h3 id="comments">10 Responses to “The Easy Way to Extract Useful Text from Arbitrary HTML”</h3> 

	<ol class="commentlist">
        <!--the bgein of one comment-->
	
		<li class="alt" id="comment-8">
			<cite><a href="http://cennywenner.com/" rel="external nofollow">Cenny Wenenr</a></cite> Says:
						<br>

			<small><a href="#comment-8" title="">April 10th, 2007 at 7:40 am</a> </small>

			<p>For the simple greedy immidietly local threshold, we could 
introduce a few assumptions to find a perhaps better estimate than the 
average. The average of some set is frequently used because it is the 
point with the least square distance over all values in the set. In this
 case however, there are two separate sets: text items and markup items.<br>
If we assume that each follows a normal distribution (which is common) 
and there is some probability to pick from one of them, we may estimate 
these parameters and find the values Thete for which the probability of 
either classification is 0.5.<br>
Solving this we receive the threshold:<br>
theta* = ( m_y t_y - m_z t_z +- (m_y - m_z) sqrt(t_y t_z) ) / (t_y - t_z)<br>
where m_y is the average of the text items, m_z the average of the markup items and t_z and t_y are given by:<br>
t_y = s_y ln p<br>
t_z = s_z ln(1-p)<br>
where s_y is the estimated standard deviation, which is<br>
sum of all i: (y_i - m_y)^2<br>
and similar for z.<br>
p is the ratio of text items, i.e. |y| / (|y| + |z|).</p>
<p>A LaTeX formula can be found here:<br>
<a href="http://ai-freenode.wikidot.com/the-easy-way-to-extract-useful-text-from-arbitrary-html" rel="nofollow">http://ai-freenode.wikidot.com/the-easy-way-to-extract-useful-text-from-arbitrary-html</a></p>
<p>I can add additional details if anyone wishes. Reservations for 
errors, did this hastily and it is not double checked in any way.</p>
<p>It should yield a bit better estimate than just the average but only 
relies on the immidietely local features and not for instance the 
relation to neighbors and global features. These should have a great 
impact. Hence, ANNs should work better if feasible.</p>

		</li>

	
	
		<li class="" id="comment-13">
			<cite><a href="http://ananthmv.info/" rel="external nofollow">Anand Muthu</a></cite> Says:
						<br>

			<small><a href="#comment-13" title="">April 19th, 2007 at 7:02 am</a> </small>

			<p>Great thought ! Superb :)<br>
Thinking to implement this in Java too.</p>

		</li>

	
	
		<li class="alt" id="comment-339">
			<cite><a href="http://www.ai-directory.com/" rel="external nofollow">Phil</a></cite> Says:
						<br>

			<small><a href="#comment-339" title="">June 23rd, 2007 at 3:41 pm</a> </small>

			<p>This approach to extract text for html page is interesting. Good idea.</p>

		</li>

	
	
		<li class="" id="comment-643">
			<cite>Lawrence</cite> Says:
						<br>

			<small><a href="#comment-643" title="">October 15th, 2007 at 11:23 am</a> </small>

			<p>That is quite interesting. I want to find a similar approach only 
with C++. In my opinion, this is probably the only way to do an AI 
capable of learning from the internet or books.</p>

		</li>

	
	
		<li class="alt" id="comment-741">
			<cite>Betty</cite> Says:
						<br>

			<small><a href="#comment-741" title="">December 11th, 2007 at 9:27 pm</a> </small>

			<p>good idea!similar to the 4th floor,I want to find a approach with C++.</p>

		</li>

	
	
		<li class="" id="comment-772">
			<cite>veelion</cite> Says:
						<br>

			<small><a href="#comment-772" title="">December 25th, 2007 at 9:42 pm</a> </small>

			<p>good idea! but what’s the content of the file ‘training.txt’ while using FANN? Thanks. If possible, please send an example to <a href="mailto:veelion@gmail.">veelion@gmail.</a> It is appreciated.</p>

		</li>

	
	
		<li class="alt" id="comment-898">
			<cite><a href="http://einarvollset.com/blog/?p=100" rel="external nofollow">Einar Vollset’s Blog. » Blog Archive » Extracting human text from web pages using Ruby</a></cite> Says:
						<br>

			<small><a href="#comment-898" title="">February 12th, 2008 at 10:40 am</a> </small>

			<p>[…] number of available options out there, including using NLTK (a
 pretty good Python NLP library), and this approach using machine 
learning (also in Python - it seems to be the language of choice for AI 
these […]</p>

		</li>

	
	
		<li class="" id="comment-1981">
			<cite>natch</cite> Says:
						<br>

			<small><a href="#comment-1981" title="">August 6th, 2008 at 1:57 pm</a> </small>

			<p>If the goal is “Easy” as you say, just do this:</p>
<p>lynx –dump URL_HERE &gt; output.txt</p>

		</li>

	
	
		<li class="alt" id="comment-1982">
			<cite>AlanT</cite> Says:
						<br>

			<small><a href="#comment-1982" title="">August 6th, 2008 at 7:48 pm</a> </small>

			<p>Interesting article! From my own experience, I will also recommend using Feedity ( <a href="http://feedity.com/" rel="nofollow">http://feedity.com</a>
 ), a simple data extraction service which can convert any webpage to 
structured information and generate a RSS feed for it. I use it daily 
for newsreading, mashups, and even for data integration at work. Its 
really awesome!</p>

		</li>

	
	
		<li class="" id="comment-1989">
			<cite><a href="http://blogial.com/" rel="external nofollow">Srinivasan R</a></cite> Says:
						<br>

			<small><a href="#comment-1989" title="">August 7th, 2008 at 3:13 am</a> </small>

			<p>Great work. We actually use a HTML parser (BeautifulSoup) and then
 find then in each div (or any container) tag decide whether to include 
the text in the output or not based on the link to text ratio. We mostly
 need to remove the sidebar menus and top menus which mostly have anchor
 tags inside the container tags.<br>
We also rule out some basic script/object/embed tags and also use common css classes to identify comments, header, etc.<br>
Works pretty good for us, but would also like to try this out.</p>

		</li>

	
	
	</ol>

 


<h2 id="respond">Comments</h2>


<form action="http://ai-depot.com/articles/wp-comments-post.php" method="post" id="commentform">


<p><input name="author" id="author" size="22" tabindex="1" type="text">
<label for="author"><small>Name (required)</small></label></p>

<p><input name="email" id="email" size="22" tabindex="2" type="text">
<label for="email"><small>Mail (will not be published) (required)</small></label></p>

<p><input name="url" id="url" size="22" tabindex="3" type="text">
<label for="url"><small>Website</small></label></p>


<!--<p><small><strong>XHTML:</strong> You can use these tags: &lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;code&gt; &lt;em&gt; &lt;i&gt; &lt;strike&gt; &lt;strong&gt; </small></p>-->

<p><textarea name="comment" id="comment" cols="50" rows="10" tabindex="4"></textarea></p>

<p><input name="submit" id="submit" tabindex="5" value="Submit Comment" type="submit">
<input name="comment_post_ID" value="90" type="hidden">
</p>
<input id="sk2_my_js_check1" name="sk2_my_js_check1" value="vvcvrzo5h7" type="hidden">
<input id="sk2_my_js_check2" name="sk2_my_js_check2" value="8d69c7263a99656360a371d7984c5dc4" type="hidden">
<script type="text/javascript">
<!--
	document.write('<input type="hidden" id="sk2_my_js_payload" name="sk2_my_js_payload" value="');
	document.write(Math.round ( Math.abs(Math.min(Math.round ( Math.abs((((Math.round ( Math.abs((1 + 12) % 42)) - 20) - 14) - 37) / 21)), 18))));
	document.write('" />');
-->
</script><input id="sk2_my_js_payload" name="sk2_my_js_payload" value="3" type="hidden">
<input id="sk2_time" name="sk2_time" value="1373292985" type="hidden"><input id="sk2_ip" name="sk2_ip" value="219.136.141.17" type="hidden"><input id="sk2_payload" name="sk2_payload" value="70d44391f86ffd816caea78da9a01b53" type="hidden">
</form>


	
        <!--do not delete-->
		
	
<!--single.php end-->
</div>

<!--include sidebar-->
<div id="sidebar">

<!--sidebar.php-->


		<!--searchfiled-->
		<!--create the searchfield-->
<form method="get" id="searchform" action="http://ai-depot.com/articles/">
<div><input name="s" id="s" type="text">
<input id="searchsubmit" value="Search" type="submit">
</div>
</form>
<!--searchform.php end-->
		

			<!-- Author information is disabled per default. Uncomment and fill in your details if you want to use it.
		<ul><li><h2>Author</h2>
		<p>A little something about you, the author. Nothing lengthy, just an overview.</p>
		</li></ul>
			-->

<h2>Subscribe Now</h2>
<div id="subscribe">

<p><a href="http://ai-depot.com/feed/articles" title="Subscribe to articles" rel="alternate" type="application/rss+xml"><img src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/feed-icon32x32.png" alt=""></a>Subscribe to <a href="http://ai-depot.com/feed/articles" title="Subscribe to articles" rel="alternate" type="application/rss+xml">artificial intelligence articles</a> in a reader.</p>

<form action="http://www.feedburner.com/fb/a/emailverify" method="post" target="popupwindow" onsubmit="window.open('http://www.feedburner.com', 'popupwindow', 'scrollbars=yes,width=550,height=520');return true"><p>Or get <a href="http://www.feedburner.com/fb/a/emailverifySubmit?feedId=802006">notified by email</a>:<br><input style="width:140px" name="email" type="text"><input value="http://feeds.feedburner.com/~e?ffid=802006" name="url" type="hidden"><input value="AI Depot" name="title" type="hidden"><input value="Subscribe" type="submit"></p></form>
</div>

<!--recent posts-->

	<h2>Recent Posts</h2>
	<ul>
		<li><a href="http://ai-depot.com/articles/artificial-intelligence-in-games/" title="Artificial Intelligence in Games">Artificial Intelligence in Games</a></li>
	<li><a href="http://ai-depot.com/articles/more-ai-content-format-preference-poll/" title="More AI Content &amp; Format Preference Poll">More AI Content &amp; Format Preference Poll</a></li>
	<li><a href="http://ai-depot.com/articles/whats-your-biggest-question-about-artificial-intelligence/" title="What’s Your Biggest Question about Artificial Intelligence?">What’s Your Biggest Question about Artificial Intelligence?</a></li>
	<li><a href="http://ai-depot.com/articles/the-easy-way-to-extract-useful-text-from-arbitrary-html/" title="The Easy Way to Extract Useful Text from Arbitrary HTML">The Easy Way to Extract Useful Text from Arbitrary HTML</a></li>
	<li><a href="http://ai-depot.com/articles/ai-knowledge-at-your-fingertips/" title="AI Knowledge At Your Fingertips">AI Knowledge At Your Fingertips</a></li>
	<li><a href="http://ai-depot.com/articles/inside-darwin-the-humanoid-robot/" title="Inside DARwIn the Humanoid Robot">Inside DARwIn the Humanoid Robot</a></li>
	<li><a href="http://ai-depot.com/articles/irc-bot-announces-headlines/" title="IRC Bot Announces Headlines">IRC Bot Announces Headlines</a></li>
	<li><a href="http://ai-depot.com/articles/ai-depotcom-renovated/" title="AI-Depot.com Renovated">AI-Depot.com Renovated</a></li>
	<li><a href="http://ai-depot.com/articles/the-random-test/" title="The Random Test">The Random Test</a></li>
	<li><a href="http://ai-depot.com/articles/solving-integer-programming-problems-using-genetic-algorithms/" title="Solving Integer Programming Problems Using Genetic Algorithms">Solving Integer Programming Problems Using Genetic Algorithms</a></li>
	</ul>

<!--archives ordered per month-->
		<h2>Archives</h2>
		<ul>
			<li><a href="http://ai-depot.com/articles/2007/09/" title="September 2007">September 2007</a></li>
	<li><a href="http://ai-depot.com/articles/2007/04/" title="April 2007">April 2007</a></li>
	<li><a href="http://ai-depot.com/articles/2007/03/" title="March 2007">March 2007</a></li>
	<li><a href="http://ai-depot.com/articles/2003/07/" title="July 2003">July 2003</a></li>
	<li><a href="http://ai-depot.com/articles/2003/05/" title="May 2003">May 2003</a></li>
	<li><a href="http://ai-depot.com/articles/2003/04/" title="April 2003">April 2003</a></li>
	<li><a href="http://ai-depot.com/articles/2003/03/" title="March 2003">March 2003</a></li>
	<li><a href="http://ai-depot.com/articles/2003/02/" title="February 2003">February 2003</a></li>
	<li><a href="http://ai-depot.com/articles/2003/01/" title="January 2003">January 2003</a></li>
	<li><a href="http://ai-depot.com/articles/2002/12/" title="December 2002">December 2002</a></li>
	<li><a href="http://ai-depot.com/articles/2002/11/" title="November 2002">November 2002</a></li>
	<li><a href="http://ai-depot.com/articles/2002/10/" title="October 2002">October 2002</a></li>
	<li><a href="http://ai-depot.com/articles/2002/09/" title="September 2002">September 2002</a></li>
	<li><a href="http://ai-depot.com/articles/2002/08/" title="August 2002">August 2002</a></li>
	<li><a href="http://ai-depot.com/articles/2002/07/" title="July 2002">July 2002</a></li>
	<li><a href="http://ai-depot.com/articles/2002/06/" title="June 2002">June 2002</a></li>
	<li><a href="http://ai-depot.com/articles/2002/04/" title="April 2002">April 2002</a></li>
		</ul>
			
<!--list of categories, order by name, without children categories, no number of articles per category-->
		<h2>Categories</h2>			
		<ul>	<li><a href="http://ai-depot.com/articles/category/analysis/" title="View all posts filed under analysis">analysis</a>
</li>
	<li><a href="http://ai-depot.com/articles/category/announcement/" title="View all posts filed under announcement">announcement</a>
</li>
	<li><a href="http://ai-depot.com/articles/category/essay/" title="View all posts filed under essay">essay</a>
</li>
	<li><a href="http://ai-depot.com/articles/category/interview/" title="View all posts filed under interview">interview</a>
</li>
	<li><a href="http://ai-depot.com/articles/category/review/" title="View all posts filed under review">review</a>
</li>
	<li><a href="http://ai-depot.com/articles/category/tutorial/" title="View all posts filed under tutorial">tutorial</a>
</li>
		</ul>


				
<!--you will set this only at frontpage or of a static page, login logout, register,validate links, link to wordpress -->

						

<!--sidebar.php end-->


<p></p>
<p></p>
<p></p>

<script type="text/javascript"><!--
google_ad_client = "pub-0940885572422333";
google_alternate_color = "FFFFFF";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text";
//2007-03-23: Wordpress
google_ad_channel = "3050258516";
google_color_border = "FFFFFF";
google_color_bg = "FFFFFF";
google_color_link = "202040";
google_color_text = "000000";
google_color_url = "606030";
//-->
</script>
<script type="text/javascript" src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px"><ins id="aswift_2_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){w.location.replace(h)}}" id="aswift_2" name="aswift_2" style="left:0;position:absolute;top:0;" frameborder="0" height="600" scrolling="no" width="160"></iframe></ins></ins>

</div>

<!--include footer-->
  <br style="clear: both;">

  </div><!--wrapper-->
</div><!--container-->

<script type="text/javascript"><!--
google_ad_client = "pub-0940885572422333";
google_alternate_color = "202040";
google_ad_width = 728;
google_ad_height = 15;
google_ad_format = "728x15_0ads_al_s";
//2007-03-29: Footer
google_ad_channel = "7008196740";
google_color_border = "202040";
google_color_bg = "202040";
google_color_link = "D0D0D0";
google_color_text = "000000";
google_color_url = "606030";
//-->
</script>
<script type="text/javascript" src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px"><ins id="aswift_3_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){w.location.replace(h)}}" id="aswift_3" name="aswift_3" style="left:0;position:absolute;top:0;" frameborder="0" height="15" scrolling="no" width="728"></iframe></ins></ins>

<div id="footer">
  <a href="http://ai-depot.com/" title="Artificial Intelligence Depot"><img src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/Logo-footer.png" alt="Artificial Intelligence"></a><br>

  <p>This page and its content are © Copyright 2001-2007, AI Depot.  All rights reserved.<br>
  Site owned and maintained by Alex J. Champandard.<br>
  Other sites in the network: <a href="http://aigamedev.com/">Game AI</a> for Developers, <a href="http://gameaiconf.com/">Game AI Conference</a> 2010.</p>
</div>

<div id="tracking">
<script src="The%20Easy%20Way%20to%20Extract%20Useful%20Text%20from%20Arbitrary%20HTML%20-%20AI%20Depot_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-759714-2";
urchinTracker();
</script>

</div>








</body><!-- Dynamic Page Served (once) in 1.086 seconds --><!-- Cached page served by WP-Cache --></html>